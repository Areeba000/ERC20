const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("ERC20", function () {
 it("Deployment should assign the total supply of tokens to the owner", async function () {
   const ERC20 = await ethers.getContractFactory("ERC20");
   const hardhatToken = await ERC20.deploy(); // Use ERC20.deploy() here
   await hardhatToken.deployed();

   const [owner] = await ethers.getSigners();

   expect((await hardhatToken.balanceOf(owner.address)).toString()).to.equal("1000");
 });

 it("Transfer should transfer tokens correctly", async function () {
   const ERC20 = await ethers.getContractFactory("ERC20");
   const hardhatToken = await ERC20.deploy(); // Use ERC20.deploy() here
   await hardhatToken.deployed();

   const [owner, addr1] = await ethers.getSigners();

   await hardhatToken.transfer(addr1.address, 100);
   expect((await hardhatToken.balanceOf(addr1.address)).toString()).to.equal("100");
 });

 it("token mint by owner", async function () {
    const ERC20 = await ethers.getContractFactory("ERC20");
    const hardhatToken = await ERC20.deploy(); // Use ERC20.deploy() here
    await hardhatToken.deployed();

    const [owner] = await ethers.getSigners();

    await hardhatToken.mint(owner.address, 1000);
    expect((await hardhatToken.balanceOf(owner.address)).toString()).to.equal("2000");
});
it("token burn by owner", async function () {
    const ERC20 = await ethers.getContractFactory("ERC20");
    const hardhatToken = await ERC20.deploy(); // Use ERC20.deploy() here
    await hardhatToken.deployed();

    const [owner] = await ethers.getSigners();

    await hardhatToken.burn(owner.address, 500);
    expect((await hardhatToken.balanceOf(owner.address)).toString()).to.equal("500");
});
it("return total supply", async function () {
    const ERC20 = await ethers.getContractFactory("ERC20");
    const hardhatToken = await ERC20.deploy(); // Use ERC20.deploy() here
    await hardhatToken.deployed();

    await hardhatToken.gettotalSupply();
    expect((await hardhatToken.gettotalSupply()).toString()).to.equal("1000");
});
it("approve correctly", async function () {
    const ERC20 = await ethers.getContractFactory("ERC20");
    const hardhatToken = await ERC20.deploy(); // Use ERC20.deploy() here
    await hardhatToken.deployed();
 
    const [owner, addr1 ,addr2] = await ethers.getSigners();

    const approvalResult = await hardhatToken.connect(owner).callStatic.approve(addr1.address, 100);

    expect(approvalResult).to.be.true;
  });
  it("allownanc correctly", async function () {
    const ERC20 = await ethers.getContractFactory("ERC20");
    const hardhatToken = await ERC20.deploy(); // Use ERC20.deploy() here
    await hardhatToken.deployed();
 
    const [owner, addr1] = await ethers.getSigners();

    const allownancResult = await hardhatToken.connect(owner).callStatic. Allowance(owner.address, addr1.address);

    expect(Number(allownancResult)).to.be.equal(0);
  });
  it("transferFrom correctly", async function () {
    const ERC20 = await ethers.getContractFactory("ERC20");
    const hardhatToken = await ERC20.deploy(); // Use ERC20.deploy() here
    await hardhatToken.deployed();
 
    const [owner, addr1 ,addr2] = await ethers.getSigners();

    await hardhatToken.mint(owner.address, 1000);
    await hardhatToken.approve(addr2.address, 100);
    const transferFromResult = await hardhatToken.connect(addr2).transferFrom(owner.address, addr1.address,'100');

    expect((await hardhatToken.balanceOf(addr1.address)).toString()).to.equal('100');
  });
});